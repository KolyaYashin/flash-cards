_ticket_list='1. Архитектура фон Неймана, принципы фон Неймана.2. Машинные команды, машинный код. Понятие языка ассемблера.3. Виды памяти ЭВМ. Запуск и исполнение программы.4. Сегментная модель памяти в архитектуре 8086.5. Процессор 8086. Регистры общего назначения.6. Процессор 8086. Сегментные регистры. Адресация в реальном режиме.Понятие сегментной части адреса и смещения.7. Процессор 8086. Регистр флагов.8. Команды пересылки данных.9. Команда сравнения.10. Команды условной и безусловной передачи управления.11. Арифметические команды.12. Двоично-десятичная арифметика.13. Команды побитовых операций. Логические команды.14. Команды работы со строками.15. Команда трансляции по таблице.16. Команда вычисления эффективного адреса.17. Структура программы на языке ассемблера. Модули. Сегменты.18. Виды ассемблеров. Intel-синтаксис, AT&T-синтаксис.19. Подпрограммы. Объявление, вызов.20. Подпрограммы. Возврат управления.21. Макроопределения.22. Стек. Аппаратная поддержка вызова подпрограмм.23. Соглашения о вызовах. Понятие, основные виды соглашений.24. Прерывания. Обработка прерываний в реальном режиме работы процессора.25. Процессор 80386. Режимы работы. Регистры.26. Страничная модель памяти. Виртуальная память.27. Математический сопроцессор. Типы данных.28. Математический сопроцессор. Регистры.29. Математический сопроцессор. Классификация команд.30. Расширения процессора. MMX. Регистры, поддерживаемые типы данных.31. Расширения процессора. MMX. Классификация команд.32. Расширения процессора. SSE. Регистры, поддерживаемые типы данных.33. Расширения процессора. SSE. Классификация команд.34. Расширения процессора. AVX. Регистры, поддерживаемые типы данных.35. Расширения процессора. AVX. Классификация команд.36. Процессоры семейства x86-64. Регистры, режимы работы.37. Расширения процессора. AES. Назначение, классификация команд.38. Архитектура RISC. Семейство процессоров ARM. Версии архитектуры, профайлы.39. Процессоры ARM. Наборы команд. Основные регистры.40. Процессоры ARM. Основные команды.'


_split=_ticket_list.split('.')
ticket_dict={}
curr=''
for item in _split:
    if item.isnumeric():
        if int(item)>1:
            ticket_dict[int(item)-1]=curr
            curr=''
    else:
        if len(curr)==0:
            curr=item
        else:
            curr=curr+'. '+item
